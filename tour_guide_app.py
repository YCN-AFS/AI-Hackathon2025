import streamlit as st
import json
from PIL import Image
import base64
from pathlib import Path
import os
from typing import Annotated, Literal, Optional, Callable
from typing_extensions import TypedDict
from pydantic import BaseModel, Field
from langchain_google_genai import ChatGoogleGenerativeAI
import pandas as pd
from langchain_community.tools.tavily_search import TavilySearchResults
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.messages import ToolMessage, HumanMessage, SystemMessage
from langgraph.graph.message import AnyMessage, add_messages
from langgraph.graph import StateGraph
from langgraph.constants import START, END
from langgraph.types import interrupt, Command
from langgraph.checkpoint.memory import MemorySaver
from langchain.schema.runnable import Runnable, RunnableConfig
from langchain.schema.runnable.base import RunnableLambda
from langgraph.prebuilt import ToolNode, tools_condition
import uuid
import requests
from datetime import datetime, timedelta

# Thi·∫øt l·∫≠p API keys
os.environ["GOOGLE_API_KEY"] = "AIzaSyBt4n2O89U7XKNM2LDwa0DSP5MI80yEwpA"
os.environ["TAVILY_API_KEY"] = "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"

# ƒê·ªãnh nghƒ©a c√°c agent
class ToAccommodation_Agent(BaseModel):
    """Chuy√™n gia v·ªÅ n∆°i ·ªü (kh√°ch s·∫°n, homestay, resort...) ·ªü Vi·ªát Nam."""
    main_location: str = Field(
        ...,
        description="ƒê·ªãa ƒëi·ªÉm ch√≠nh m√† ng∆∞·ªùi d√πng mu·ªën ƒë·∫∑t n∆°i ·ªü",
        example="Nha Trang"
    )
    expense: str = Field(
        ...,
        description="S·ªë ti·ªÅn m√† ng∆∞·ªùi d√πng c√≥ th·ªÉ b·ªè ra thu√™ n∆°i ·ªü",
        example="D∆∞·ªõi 200.000 VNƒê"
    )
    option: str = Field(
        ...,
        description="Nh·ªØng l∆∞u √Ω, mong mu·ªën, y√™u c·∫ßu ph·ª• c·ªßa ng∆∞·ªùi d√πng",
        example="G·∫ßn bi·ªÉn"
    )

class ToDestination_Agent(BaseModel):
    """Chuy√™n gia v·ªÅ ƒë·ªãa ƒëi·ªÉm du l·ªãch n·ªïi ti·∫øng ·ªü Vi·ªát Nam."""
    location: str = Field(
        ...,
        description="ƒê·ªãa ƒëi·ªÉm du l·ªãch m√† ng∆∞·ªùi d√πng quan t√¢m",
        example="ƒê√† L·∫°t"
    )
    duration: str = Field(
        ...,
        description="Th·ªùi gian d·ª± ki·∫øn cho chuy·∫øn ƒëi",
        example="3 ng√†y"
    )
    interests: str = Field(
        ...,
        description="S·ªü th√≠ch v√† mong mu·ªën c·ªßa ng∆∞·ªùi d√πng",
        example="Th√≠ch thi√™n nhi√™n, ch·ª•p ·∫£nh"
    )

class ToFood_Agent(BaseModel):
    """Chuy√™n gia v·ªÅ ·∫©m th·ª±c ƒë·ªãa ph∆∞∆°ng."""
    location: str = Field(
        ...,
        description="ƒê·ªãa ƒëi·ªÉm mu·ªën t√¨m hi·ªÉu v·ªÅ ·∫©m th·ª±c",
        example="H·ªôi An"
    )
    preferences: str = Field(
        ...,
        description="S·ªü th√≠ch ·∫©m th·ª±c c·ªßa ng∆∞·ªùi d√πng",
        example="ƒê·ªì h·∫£i s·∫£n, m√≥n truy·ªÅn th·ªëng"
    )
    budget: str = Field(
        ...,
        description="Ng√¢n s√°ch cho b·ªØa ƒÉn",
        example="200.000/ng∆∞·ªùi"
    )
    allergy: str = Field(
        ...,
        description="Danh s√°ch c√°c m√≥n ƒÉn d·ªã ·ª©ng",
        example="ƒê·∫≠u ph·ªông, h·∫£i s·∫£n"
    )

class ToTransaction_Agent(BaseModel):
    """Chuy√™n gia v·ªÅ giao d·ªãch v√† thanh to√°n."""
    pass

# ƒê·ªãnh nghƒ©a c√°c class t·ª´ notebook
class Preferences(BaseModel):
    name: Optional[str] = Field("V√¥ Danh", description="T√™n ng∆∞·ªùi d√πng")
    number_member: Optional[str] = Field("2", description="T·ªïng s·ªë th√†nh vi√™n trong nh√≥m")
    total_expense: Optional[str] = Field("2 tri·ªáu", description="Chi ph√≠ t·ªïng m√† ng∆∞·ªùi d√πng c√≥ th·ªÉ b·ªè ra cho chuy·∫øn ƒëi")

def update_dialog_stack(container: list[str], what: Optional[str]) -> list[str]:
    """Push or pop the state."""
    if what is None:
        return container
    if what == "pop":
        return container[:-1]
    return container + [what]

# State Management
class State(TypedDict):
    messages: Annotated[list[AnyMessage], add_messages]
    preferences: Preferences
    Recommended_Tour: dict
    dialog_state: Annotated[
        list[
            Literal[
                "Primary_Agent",
                "Accommodation_Agent",
                "Destination_Agent",
                "Food_Agent",
                "Transaction_Agent"
            ]
        ],
        update_dialog_stack,
    ]

# C√°c prompt m·∫´u cho t·ª´ng agent
PRIMARY_PROMPT = """B·∫°n l√† m·ªôt tr·ª£ l√Ω du l·ªãch th√¥ng minh, chuy√™n gi√∫p ng∆∞·ªùi d√πng l√™n l·ªãch tr√¨nh v√† s·∫Øp x·∫øp th·ªùi gian chuy·∫øn ƒëi.
üìå Ch·ª©c nƒÉng ch√≠nh c·ªßa b·∫°n l√† ƒëi·ªÅu ph·ªëi cu·ªôc h·ªôi tho·∫°i cho c√°c Agent chuy√™n m√¥n kh√°c d·ª±a tr√™n c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng.
‚ùå B·∫°n kh√¥ng t∆∞ v·∫•n v·ªÅ l·ªãch tr√¨nh, n∆°i ·ªü, ph∆∞∆°ng ti·ªán di chuy·ªÉn, ƒÉn u·ªëng hay c√°c ho·∫°t ƒë·ªông kh√°c.

üí° **H∆∞·ªõng d·∫´n quan tr·ªçng chung:**
- Tr·∫£ l·ªùi ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu b·∫±ng ti·∫øng Vi·ªát (ng∆∞·ªùi d√πng kh√¥ng hi·ªÉu c√°c ng√¥n ng·ªØ kh√°c).
- X∆∞ng h√¥ th√¢n thi·ªán: 't√¥i' v·ªõi 'b·∫°n'.
- N·∫øu c√≥ c√¥ng c·ª• ph√π h·ª£p, h√£y s·ª≠ d·ª•ng c√¥ng c·ª• ƒë√≥ ƒë·ªÉ c√≥ th√™m th√¥ng tin ph√π h·ª£p.
- Sau khi tr·∫£ l·ªùi xong c√¢u h·ªèi, h√£y h·ªèi: "T√¥i c√≥ th·ªÉ gi√∫p g√¨ th√™m cho b·∫°n?"

Th√¥ng tin v·ªÅ ng∆∞·ªùi d√πng:
- T√™n: {name}
- S·ªë th√†nh vi√™n: {number_member}
- Ng√¢n s√°ch: {total_expense}

üöÄ H√£y gi√∫p ng∆∞·ªùi d√πng c√≥ m·ªôt chuy·∫øn ƒëi tuy·ªát v·ªùi!"""

ACCOMMODATION_PROMPT = """B·∫°n l√† chuy√™n gia t∆∞ v·∫•n v·ªÅ n∆°i ·ªü du l·ªãch t·∫°i Vi·ªát Nam. H√£y t∆∞ v·∫•n d·ª±a tr√™n:
- ƒê·ªãa ƒëi·ªÉm: {location}
- Ng√¢n s√°ch: {budget}
- S·ªë ng∆∞·ªùi: {number_member}
- Y√™u c·∫ßu th√™m: {requirements}

H√£y ƒë·ªÅ xu·∫•t √≠t nh·∫•t 3 l·ª±a ch·ªçn ph√π h·ª£p, m·ªói l·ª±a ch·ªçn bao g·ªìm:
1. T√™n v√† lo·∫°i h√¨nh n∆°i ·ªü
2. V·ªã tr√≠ v√† kho·∫£ng c√°ch ƒë·∫øn c√°c ƒëi·ªÉm du l·ªãch
3. Gi√° c·∫£ v√† c√°c g√≥i d·ªãch v·ª•
4. ƒê√°nh gi√° ∆∞u/nh∆∞·ª£c ƒëi·ªÉm
5. L·ªùi khuy√™n khi ƒë·∫∑t ph√≤ng"""

DESTINATION_PROMPT = """B·∫°n l√† chuy√™n gia t∆∞ v·∫•n v·ªÅ ƒë·ªãa ƒëi·ªÉm du l·ªãch t·∫°i Vi·ªát Nam. V·ªõi th√¥ng tin:
- ƒê·ªãa ƒëi·ªÉm: {location}
- Th·ªùi gian: {duration}
- S·ªë ng∆∞·ªùi: {number_member}
- Ng√¢n s√°ch: {budget}
- S·ªü th√≠ch: {interests}

H√£y t∆∞ v·∫•n chi ti·∫øt v·ªÅ:
1. C√°c ƒë·ªãa ƒëi·ªÉm n·ªïi ti·∫øng n√™n ƒë·∫øn
2. Th·ªùi ƒëi·ªÉm th√≠ch h·ª£p ƒë·ªÉ ƒëi
3. Ph∆∞∆°ng ti·ªán di chuy·ªÉn
4. ∆Ø·ªõc t√≠nh chi ph√≠
5. L·ªùi khuy√™n v√† l∆∞u √Ω ƒë·∫∑c bi·ªát"""

FOOD_PROMPT = """B·∫°n l√† chuy√™n gia ·∫©m th·ª±c ƒë·ªãa ph∆∞∆°ng t·∫°i Vi·ªát Nam. V·ªõi th√¥ng tin:
- ƒê·ªãa ƒëi·ªÉm: {location}
- S·ªü th√≠ch: {preferences}
- Ng√¢n s√°ch: {budget}/ng∆∞·ªùi
- S·ªë ng∆∞·ªùi: {number_member}
- D·ªã ·ª©ng: {allergy}

H√£y t∆∞ v·∫•n v·ªÅ:
1. C√°c m√≥n ƒë·∫∑c s·∫£n n·ªïi ti·∫øng
2. ƒê·ªãa ch·ªâ c√°c qu√°n ƒÉn ngon
3. Gi√° c·∫£ tham kh·∫£o
4. Th·ªùi ƒëi·ªÉm n√™n ƒë·∫øn
5. L·ªùi khuy√™n v·ªÅ v·ªá sinh an to√†n th·ª±c ph·∫©m"""

# Kh·ªüi t·∫°o Gemini model
llm = ChatGoogleGenerativeAI(
    model="gemini-1.5-flash",
    temperature=0.5,
    max_tokens=None,
    timeout=None,
    max_retries=2,
    context_window=4096,
    max_new_tokens=4096
)

def handle_tool_error(state) -> dict:
    error = state.get("error")
    tool_calls = state["messages"][-1].tool_calls
    return {
        "messages": [
            ToolMessage(
                content=f"Error: {repr(error)}\n please fix your mistakes.",
                tool_call_id=tc["id"],
            )
            for tc in tool_calls
        ]
    }

def create_tool_node_with_fallback(tools: list) -> dict:
    return ToolNode(tools).with_fallbacks(
        [RunnableLambda(handle_tool_error)], exception_key="error"
    )

# Define Primary Agent tools
Primary_Agent_tools = [ToAccommodation_Agent, ToDestination_Agent, ToFood_Agent, ToTransaction_Agent]

def route_primary_agent(state: State):
    """Route messages from Primary Agent to appropriate specialized agents."""
    route = tools_condition(state)
    if route == END:
        return END

    tool_calls = state["messages"][-1].tool_calls
    if tool_calls:
        if tool_calls[0]["name"] == ToAccommodation_Agent.__name__:
            return "enter_Accommodation_Agent"
        elif tool_calls[0]["name"] == ToDestination_Agent.__name__:
            return "enter_Destination_Agent"
        elif tool_calls[0]["name"] == ToFood_Agent.__name__:
            return "enter_Food_Agent"
        elif tool_calls[0]["name"] == ToTransaction_Agent.__name__:
            return "enter_Transaction_Agent"
        return "Primary_Agent_tools"
    
    return "Primary_Agent"

def Primary_Agent(state: State):
    """Primary agent that handles initial user interactions."""
    # Initialize state if not present
    if "preferences" not in state:
        state["preferences"] = Preferences()
    if "Recommended_Tour" not in state:
        state["Recommended_Tour"] = {}
    if "dialog_state" not in state:
        state["dialog_state"] = ["Primary_Agent"]
        
    # Create the prompt template
    prompt = ChatPromptTemplate.from_messages([
        ("system", PRIMARY_PROMPT.format(
            name=state["preferences"].name,
            number_member=state["preferences"].number_member,
            total_expense=state["preferences"].total_expense
        )),
        ("human", "{input}")
    ])
    
    # Get the last message from state
    last_message = state["messages"][-1]
    if isinstance(last_message, tuple):
        user_input = last_message[1]
    else:
        user_input = last_message.content
        
    # Format the prompt with the user's input
    formatted_prompt = prompt.format_messages(input=user_input)
    
    # Create runnable with tools
    runnable = llm.bind_tools(Primary_Agent_tools)
    
    # Invoke the LLM with the formatted messages
    response = runnable.invoke(formatted_prompt)
    return {"messages": response}

# C√¥ng c·ª• t√¨m ki·∫øm online
def search_tool(request: str) -> list:
    """C√¥ng c·ª• t√¨m ki·∫øm online s·ª≠ d·ª•ng Tavily API."""
    search_results = TavilySearchResults(max_results=2).invoke(request)
    return search_results

# Helper functions ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin t·ª´ c√¢u h·ªèi
def extract_location(text: str) -> str:
    """Tr√≠ch xu·∫•t ƒë·ªãa ƒëi·ªÉm t·ª´ c√¢u h·ªèi."""
    text = text.lower()
    locations = ["ƒë√† l·∫°t", "h·ªôi an", "sapa", "ph√∫ qu·ªëc", "nha trang", "h√† n·ªôi", 
                "s√†i g√≤n", "h·ªì ch√≠ minh", "hu·∫ø", "ƒë√† n·∫µng", "h·∫° long", "quy nh∆°n"]
    
    for loc in locations:
        if loc in text:
            return loc.title()
    return "ch∆∞a x√°c ƒë·ªãnh"

def extract_duration(text: str) -> str:
    """Tr√≠ch xu·∫•t th·ªùi gian t·ª´ c√¢u h·ªèi."""
    text = text.lower()
    if "1 ng√†y" in text or "m·ªôt ng√†y" in text:
        return "1 ng√†y"
    elif "2 ng√†y" in text or "hai ng√†y" in text:
        return "2 ng√†y"
    elif "3 ng√†y" in text or "ba ng√†y" in text:
        return "3 ng√†y"
    elif "4 ng√†y" in text or "b·ªën ng√†y" in text:
        return "4 ng√†y"
    elif "5 ng√†y" in text or "nƒÉm ng√†y" in text:
        return "5 ng√†y"
    elif "1 tu·∫ßn" in text or "m·ªôt tu·∫ßn" in text:
        return "7 ng√†y"
    return "3 ng√†y"

def extract_interests(text: str) -> str:
    """Tr√≠ch xu·∫•t s·ªü th√≠ch t·ª´ c√¢u h·ªèi."""
    text = text.lower()
    interests = []
    
    interest_keywords = {
        "thi√™n nhi√™n": ["thi√™n nhi√™n", "n√∫i", "bi·ªÉn", "r·ª´ng", "th√°c"],
        "ch·ª•p ·∫£nh": ["ch·ª•p ·∫£nh", "ch·ª•p h√¨nh", "photography", "check in"],
        "·∫©m th·ª±c": ["ƒÉn u·ªëng", "·∫©m th·ª±c", "m√≥n ƒÉn", "ƒë·∫∑c s·∫£n"],
        "vƒÉn h√≥a": ["vƒÉn h√≥a", "l·ªãch s·ª≠", "di t√≠ch", "b·∫£o t√†ng"],
        "mua s·∫Øm": ["mua s·∫Øm", "shopping", "ch·ª£"],
        "gi·∫£i tr√≠": ["gi·∫£i tr√≠", "vui ch∆°i", "c√¥ng vi√™n", "bar", "caf√©"]
    }
    
    for category, keywords in interest_keywords.items():
        if any(keyword in text for keyword in keywords):
            interests.append(category)
    
    return ", ".join(interests) if interests else "ch∆∞a x√°c ƒë·ªãnh"

def extract_requirements(text: str) -> str:
    """Tr√≠ch xu·∫•t y√™u c·∫ßu t·ª´ c√¢u h·ªèi."""
    text = text.lower()
    requirements = []
    
    req_keywords = {
        "g·∫ßn trung t√¢m": ["trung t√¢m", "g·∫ßn ph·ªë"],
        "g·∫ßn bi·ªÉn": ["g·∫ßn bi·ªÉn", "view bi·ªÉn"],
        "y√™n tƒ©nh": ["y√™n tƒ©nh", "kh√¥ng ·ªìn √†o"],
        "c√≥ h·ªì b∆°i": ["h·ªì b∆°i", "b·ªÉ b∆°i", "swimming"],
        "c√≥ b√£i ƒë·ªó xe": ["b√£i ƒë·ªó xe", "parking"],
        "ph√π h·ª£p gia ƒë√¨nh": ["gia ƒë√¨nh", "tr·∫ª em", "family"]
    }
    
    for req, keywords in req_keywords.items():
        if any(keyword in text for keyword in keywords):
            requirements.append(req)
    
    return ", ".join(requirements) if requirements else "kh√¥ng c√≥ y√™u c·∫ßu ƒë·∫∑c bi·ªát"

def extract_food_preferences(text: str) -> str:
    """Tr√≠ch xu·∫•t s·ªü th√≠ch ·∫©m th·ª±c t·ª´ c√¢u h·ªèi."""
    text = text.lower()
    preferences = []
    
    food_keywords = {
        "h·∫£i s·∫£n": ["h·∫£i s·∫£n", "c√°", "t√¥m", "cua", "gh·∫π"],
        "ƒë·ªì n∆∞·ªõng": ["n∆∞·ªõng", "bbq", "barbecue"],
        "m√≥n truy·ªÅn th·ªëng": ["truy·ªÅn th·ªëng", "ƒë·∫∑c s·∫£n", "ƒë·ªãa ph∆∞∆°ng"],
        "chay": ["chay", "thu·∫ßn chay", "vegetarian"],
        "ƒÉn v·∫∑t": ["ƒÉn v·∫∑t", "street food", "ƒë·ªì ƒÉn ƒë∆∞·ªùng ph·ªë"]
    }
    
    for pref, keywords in food_keywords.items():
        if any(keyword in text for keyword in keywords):
            preferences.append(pref)
    
    return ", ".join(preferences) if preferences else "kh√¥ng c√≥ y√™u c·∫ßu ƒë·∫∑c bi·ªát"

def calculate_food_budget(total_budget: str) -> str:
    """T√≠nh to√°n ng√¢n s√°ch cho ƒÉn u·ªëng (30% t·ªïng ng√¢n s√°ch)."""
    try:
        # L·ªçc ra c√°c s·ªë t·ª´ chu·ªói ng√¢n s√°ch
        budget = float(''.join(filter(str.isdigit, total_budget)))
        
        # N·∫øu s·ªë c√≥ 4-9 ch·ªØ s·ªë, gi·∫£ ƒë·ªãnh l√† VNƒê
        if 1000 <= budget <= 999999999:
            food_budget = budget * 0.3
            return f"{int(food_budget):,} VNƒê"
        # N·∫øu s·ªë nh·ªè h∆°n 4 ch·ªØ s·ªë, gi·∫£ ƒë·ªãnh l√† tri·ªáu VNƒê
        else:
            food_budget = budget * 1000000 * 0.3
            return f"{int(food_budget):,} VNƒê"
    except:
        return "200,000 VNƒê"

# Function ƒë·ªÉ x√°c ƒë·ªãnh agent ph√π h·ª£p v√† t·∫°o prompt
def determine_agent_and_prompt(user_input: str, preferences: Preferences) -> tuple[str, str]:
    """X√°c ƒë·ªãnh agent ph√π h·ª£p v√† t·∫°o prompt t∆∞∆°ng ·ª©ng."""
    input_lower = user_input.lower()
    
    if any(word in input_lower for word in ["kh√°ch s·∫°n", "homestay", "resort", "·ªü ƒë√¢u", "ngh·ªâ", "ph√≤ng", "ng·ªß", "l∆∞u tr√∫"]):
        prompt = ACCOMMODATION_PROMPT.format(
            location=extract_location(user_input),
            budget=preferences.total_expense,
            number_member=preferences.number_member,
            requirements=extract_requirements(user_input)
        )
        return "accommodation", prompt
    
    elif any(word in input_lower for word in ["ƒë·ªãa ƒëi·ªÉm", "ƒëi ƒë√¢u", "tham quan", "du l·ªãch", "thƒÉm quan", "ƒëi·ªÉm ƒë·∫øn", "th·∫Øng c·∫£nh"]):
        prompt = DESTINATION_PROMPT.format(
            location=extract_location(user_input),
            duration=extract_duration(user_input),
            number_member=preferences.number_member,
            budget=preferences.total_expense,
            interests=extract_interests(user_input)
        )
        return "destination", prompt
    
    elif any(word in input_lower for word in ["ƒÉn", "m√≥n", "nh√† h√†ng", "qu√°n", "ƒë·∫∑c s·∫£n", "·∫©m th·ª±c", "ƒë·ªì ƒÉn"]):
        prompt = FOOD_PROMPT.format(
            location=extract_location(user_input),
            preferences=extract_food_preferences(user_input),
            budget=calculate_food_budget(preferences.total_expense),
            number_member=preferences.number_member,
            allergy="kh√¥ng c√≥ th√¥ng tin"
        )
        return "food", prompt
    
    else:
        prompt = PRIMARY_PROMPT.format(
            name=preferences.name,
            number_member=preferences.number_member,
            total_expense=preferences.total_expense
        )
        return "general", prompt

# Tools for specialized agents
class CompleteOrEscalate(BaseModel):
    """
    M·ªôt c√¥ng c·ª• ƒë·ªÉ ƒë√°nh d·∫•u nhi·ªám v·ª• hi·ªán t·∫°i ƒë√£ ho√†n th√†nh v√†/ho·∫∑c chuy·ªÉn giao quy·ªÅn ki·ªÉm so√°t cu·ªôc ƒë·ªëi tho·∫°i
    cho Primary Agent, ng∆∞·ªùi c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh l·∫°i h∆∞·ªõng cu·ªôc ƒë·ªëi tho·∫°i d·ª±a tr√™n nhu c·∫ßu c·ªßa ng∆∞·ªùi d√πng.
    """
    complete: bool = Field(
        ...,
        description="V·∫•n ƒë·ªÅ c·ªßa ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c gi·∫£i quy·∫øt xong ch∆∞a? R·ªìi th√¨ True, Ch∆∞a th√¨ False",
        example="False"
    )
    reason: str = Field(
        ...,
        description="Nguy√™n nh√¢n t·∫°i sao ƒë∆∞a cu·ªôc ƒë·ªëi tho·∫°i v·ªÅ l·∫°i Primary Agent",
        example="Ng∆∞·ªùi d√πng h·ªèi v·ªÅ ch·ªß ƒë·ªÅ kh√°c ngo√†i chuy√™n m√¥n"
    )

def route_specific_agent(state: State):
    route = tools_condition(state)
    if route == END:
        return END

    tool_calls = state["messages"][-1].tool_calls
    did_cancel = any(tc["name"] == CompleteOrEscalate.__name__ for tc in tool_calls)

    if did_cancel:
        return "leave_agent"

    return route

def pop_dialog_state(state: State) -> dict:
    """Pop the dialog stack and return to the main assistant."""
    messages = []
    if state["messages"][-1].tool_calls:
        messages.append(
            ToolMessage(
                content="Resuming dialog with the Primary Agent. Please reflect on the past conversation and assist the user as needed.",
                tool_call_id=state["messages"][-1].tool_calls[0]["id"],
            )
        )
    else:
        messages.append(
            SystemMessage(
                content="Resuming dialog with the Primary Agent. Please reflect on the past conversation and assist the user as needed."
            )
        )
    return {
        "dialog_state": "pop",
        "messages": messages,
    }

def create_entry_node(agent_name: str) -> Callable:
    def entry_node(state: State) -> dict:
        tool_call_id = state["messages"][-1].tool_calls[0]["id"]
        return {
            "messages": [
                ToolMessage(
                    content=(
                        f"Tr·ª£ l√Ω hi·ªán t·∫°i l√† {agent_name}. H√£y xem x√©t l·∫°i cu·ªôc tr√≤ chuy·ªán gi·ªØa tr·ª£ l√Ω ch√≠nh v√† ng∆∞·ªùi d√πng. "
                        "√ù ƒë·ªãnh c·ªßa ng∆∞·ªùi d√πng ch∆∞a ƒë∆∞·ª£c ƒë√°p ·ª©ng. H√£y s·ª≠ d·ª•ng c√°c c√¥ng c·ª• ƒë∆∞·ª£c cung c·∫•p ƒë·ªÉ h·ªó tr·ª£ ng∆∞·ªùi d√πng. "
                        f"Nh·ªõ r·∫±ng, b·∫°n l√† {agent_name}, v√† vi·ªác ƒë·∫∑t ch·ªó, c·∫≠p nh·∫≠t ho·∫∑c b·∫•t k·ª≥ h√†nh ƒë·ªông n√†o kh√°c s·∫Ω kh√¥ng ho√†n t·∫•t "
                        f"cho ƒë·∫øn khi b·∫°n ƒë√£ g·ªçi th√†nh c√¥ng c√¥ng c·ª• ph√π h·ª£p. "
                        "N·∫øu ng∆∞·ªùi d√πng thay ƒë·ªïi √Ω ƒë·ªãnh ho·∫∑c c·∫ßn tr·ª£ gi√∫p cho c√°c t√°c v·ª• kh√°c, h√£y d·ª´ng cu·ªôc tr√≤ chuy·ªán "
                        "ƒë·ªÉ tr·ª£ l√Ω ch√≠nh ti·∫øp qu·∫£n cu·ªôc tr√≤ chuy·ªán. "
                        "Kh√¥ng ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p ƒë·∫øn vi·ªác b·∫°n l√† ai ‚Äì ch·ªâ h√†nh ƒë·ªông nh∆∞ m·ªôt tr·ª£ l√Ω thay m·∫∑t cho h·ªá th·ªëng."
                    ),
                    tool_call_id=tool_call_id,
                )
            ],
            "dialog_state": agent_name,
        }
    return entry_node

def Accommodation_Agent(state: State):
    """Accommodation agent that handles accommodation-related queries."""
    prompt = ChatPromptTemplate.from_messages([
        ("system", ACCOMMODATION_PROMPT.format(
            location=extract_location(state["messages"][-1][1]),
            budget=state["preferences"].total_expense,
            number_member=state["preferences"].number_member,
            requirements=extract_requirements(state["messages"][-1][1])
        )),
        ("human", "{input}")
    ])
    
    formatted_prompt = prompt.format_messages(input=state["messages"][-1][1])
    runnable = llm.bind_tools([search_tool, CompleteOrEscalate])
    response = runnable.invoke(formatted_prompt)
    return {"messages": response}

def Destination_Agent(state: State):
    """Destination agent that handles destination-related queries."""
    prompt = ChatPromptTemplate.from_messages([
        ("system", DESTINATION_PROMPT.format(
            location=extract_location(state["messages"][-1][1]),
            duration=extract_duration(state["messages"][-1][1]),
            number_member=state["preferences"].number_member,
            budget=state["preferences"].total_expense,
            interests=extract_interests(state["messages"][-1][1])
        )),
        ("human", "{input}")
    ])
    
    formatted_prompt = prompt.format_messages(input=state["messages"][-1][1])
    runnable = llm.bind_tools([search_tool, CompleteOrEscalate])
    response = runnable.invoke(formatted_prompt)
    return {"messages": response}

def Food_Agent(state: State):
    """Food agent that handles food-related queries."""
    prompt = ChatPromptTemplate.from_messages([
        ("system", FOOD_PROMPT.format(
            location=extract_location(state["messages"][-1][1]),
            preferences=extract_food_preferences(state["messages"][-1][1]),
            budget=calculate_food_budget(state["preferences"].total_expense),
            number_member=state["preferences"].number_member,
            allergy="kh√¥ng c√≥ th√¥ng tin"
        )),
        ("human", "{input}")
    ])
    
    formatted_prompt = prompt.format_messages(input=state["messages"][-1][1])
    runnable = llm.bind_tools([search_tool, CompleteOrEscalate])
    response = runnable.invoke(formatted_prompt)
    return {"messages": response}

def Transaction_Agent(state: State):
    """Transaction agent that handles transaction-related queries."""
    prompt = ChatPromptTemplate.from_messages([
        ("system", "B·∫°n l√† chuy√™n gia v·ªÅ giao d·ªãch v√† thanh to√°n. H√£y gi√∫p ng∆∞·ªùi d√πng th·ª±c hi·ªán c√°c giao d·ªãch an to√†n v√† thu·∫≠n ti·ªán."),
        ("human", "{input}")
    ])
    
    formatted_prompt = prompt.format_messages(input=state["messages"][-1][1])
    runnable = llm.bind_tools([CompleteOrEscalate])
    response = runnable.invoke(formatted_prompt)
    return {"messages": response}

def initialize_graph():
    """Initialize and return the graph."""
    builder = StateGraph(State)

    # Add nodes
    builder.add_node("Primary_Agent", Primary_Agent)
    builder.add_node("Primary_Agent_tools", create_tool_node_with_fallback(Primary_Agent_tools))

    # Add specialized agent nodes
    builder.add_node("Accommodation_Agent", Accommodation_Agent)
    builder.add_node("Destination_Agent", Destination_Agent)
    builder.add_node("Food_Agent", Food_Agent)
    builder.add_node("Transaction_Agent", Transaction_Agent)

    # Add specialized agent tools nodes
    builder.add_node("Accommodation_Agent_tools", create_tool_node_with_fallback([search_tool, CompleteOrEscalate]))
    builder.add_node("Destination_Agent_tools", create_tool_node_with_fallback([search_tool, CompleteOrEscalate]))
    builder.add_node("Food_Agent_tools", create_tool_node_with_fallback([search_tool, CompleteOrEscalate]))
    builder.add_node("Transaction_Agent_tools", create_tool_node_with_fallback([CompleteOrEscalate]))

    # Add entry nodes for specialized agents
    builder.add_node("enter_Accommodation_Agent", create_entry_node("Accommodation_Agent"))
    builder.add_node("enter_Destination_Agent", create_entry_node("Destination_Agent"))
    builder.add_node("enter_Food_Agent", create_entry_node("Food_Agent"))
    builder.add_node("enter_Transaction_Agent", create_entry_node("Transaction_Agent"))

    # Add leave agent node
    builder.add_node("leave_agent", pop_dialog_state)

    # Add edges with routing
    builder.add_edge(START, "Primary_Agent")
    
    # Primary Agent routing
    builder.add_conditional_edges(
        "Primary_Agent",
        route_primary_agent,
        {
            "enter_Accommodation_Agent": "Accommodation_Agent",
            "enter_Destination_Agent": "Destination_Agent",
            "enter_Food_Agent": "Food_Agent",
            "enter_Transaction_Agent": "Transaction_Agent",
            "Primary_Agent_tools": "Primary_Agent_tools",
            END: END
        }
    )
    builder.add_edge("Primary_Agent_tools", "Primary_Agent")

    # Specialized agents routing
    for agent in ["Accommodation", "Destination", "Food", "Transaction"]:
        # Add edges from agent to tools
        builder.add_conditional_edges(
            f"{agent}_Agent",
            route_specific_agent,
            {
                "tools": f"{agent}_Agent_tools",
                "leave_agent": "leave_agent",
                END: END
            }
        )
        
        # Add edge from tools back to agent
        builder.add_edge(f"{agent}_Agent_tools", f"{agent}_Agent")
        
        # Add edge from entry node to agent
        builder.add_edge(f"enter_{agent}_Agent", f"{agent}_Agent")

    # Add edge from leave_agent back to Primary_Agent
    builder.add_edge("leave_agent", "Primary_Agent")

    # Compile graph
    checkpointer = MemorySaver()
    return builder.compile(checkpointer=checkpointer)

# Thi·∫øt l·∫≠p trang
st.set_page_config(
    page_title="Tour Guide Assistant",
    page_icon="üèñÔ∏è",
    layout="wide"
)

# Custom CSS ƒë·ªÉ t·∫°o giao di·ªán ƒë·∫πp h∆°n
st.markdown("""
<style>
.stApp {
    background-color: #f0f2f6;
}

.main {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
}

.stTitle {
    color: #1e3a8a;
    font-size: 2.5rem !important;
    text-align: center;
    margin-bottom: 2rem !important;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
}

.chat-container {
    background-color: white;
    border-radius: 1rem;
    padding: 2rem;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    margin-bottom: 2rem;
}

.chat-message {
    padding: 1rem;
    border-radius: 1rem;
    margin-bottom: 1rem;
    display: flex;
    flex-direction: column;
    max-width: 80%;
}

.user-message {
    background-color: #2196f3;
    color: #ffffff;
    margin-left: auto;
    margin-right: 1rem;
    border: 1px solid #1976d2;
}

.bot-message {
    background-color: #ffffff;
    color: #2c3e50;
    margin-right: auto;
    margin-left: 1rem;
    border: 1px solid #e0e0e0;
}

.message-content {
    display: flex;
    align-items: flex-start;
}

.message-text {
    margin-left: 1rem;
    line-height: 1.6;
    font-size: 1.05rem;
}

.user-message b {
    color: #e3f2fd;
    font-size: 0.9rem;
    text-transform: uppercase;
}

.bot-message b {
    color: #1565c0;
    font-size: 0.9rem;
    text-transform: uppercase;
}

/* Style cho input v√† button */
.stTextInput input {
    border: 2px solid #e0e0e0;
    border-radius: 0.5rem;
    padding: 0.75rem;
    font-size: 1rem;
    color: #2c3e50;
    background-color: #ffffff;
}

.stTextInput input:focus {
    border-color: #1e88e5;
    box-shadow: 0 0 0 2px rgba(30,136,229,0.2);
}

.stButton button {
    background-color: #1976d2 !important;
    color: #ffffff !important;
    border-radius: 0.5rem !important;
    padding: 0.75rem 1.5rem !important;
    font-weight: 600 !important;
    border: none !important;
    transition: all 0.3s ease !important;
    text-transform: uppercase !important;
    letter-spacing: 0.5px !important;
}

.stButton button:hover {
    background-color: #1565c0 !important;
    transform: translateY(-2px);
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
}

/* Style cho footer */
.footer {
    background-color: #ffffff;
    padding: 2rem;
    border-radius: 1rem;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    margin-top: 2rem;
    border: 1px solid #e0e0e0;
}

.footer h3 {
    color: #1565c0;
    margin-bottom: 1.5rem;
    font-size: 1.3rem;
    font-weight: 600;
}

.footer ul {
    list-style-type: none;
    padding: 0;
}

.footer li {
    color: #1a237e;  /* M√†u xanh ƒë·∫≠m cho text */
    margin-bottom: 1rem;
    padding: 0.8rem 1rem;
    position: relative;
    font-size: 1rem;
    background-color: #e3f2fd;  /* N·ªÅn xanh nh·∫°t */
    border-radius: 0.5rem;
    border-left: 4px solid #1565c0;  /* Vi·ªÅn tr√°i ƒë·∫≠m */
    transition: all 0.3s ease;
    cursor: pointer;
}

.footer li:hover {
    background-color: #bbdefb;
    transform: translateX(5px);
}

.footer li:before {
    content: "üí°";  /* Thay bullet point b·∫±ng emoji */
    margin-right: 0.5rem;
}

/* Style cho sidebar */
.sidebar .stMarkdown {
    background-color: #f8f9fa;
    padding: 1rem;
    border-radius: 0.5rem;
    margin-bottom: 1rem;
}

.sidebar h3 {
    color: #1565c0;
    margin-bottom: 1rem;
}

.sidebar p {
    color: #2c3e50;
    margin-bottom: 0.5rem;
}

/* Style cho form */
.stForm {
    background-color: #ffffff;
    padding: 2rem;
    border-radius: 1rem;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
}

.stForm .stMarkdown h3 {
    color: #1565c0;
    margin-bottom: 2rem;
}

.stTextInput > label {
    color: #2c3e50;
    font-weight: 500;
}

.stFormSubmitButton > button {
    background-color: #1565c0 !important;
    color: white !important;
    font-weight: 600 !important;
    padding: 0.75rem 2rem !important;
    border-radius: 0.5rem !important;
    border: none !important;
    transition: all 0.3s ease !important;
}

.stFormSubmitButton > button:hover {
    background-color: #0d47a1 !important;
    transform: translateY(-2px);
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
}

/* Responsive design */
@media (max-width: 768px) {
    .chat-message {
        max-width: 90%;
    }
}

/* Style cho welcome message */
.welcome-header {
    background: linear-gradient(135deg, #1976d2, #1565c0);
    color: white;
    padding: 1.5rem;
    border-radius: 1rem;
    margin-bottom: 2rem;
    text-align: center;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
}

.welcome-header h3 {
    margin: 0;
    font-size: 1.5rem;
    font-weight: 600;
    text-shadow: 1px 1px 2px rgba(0,0,0,0.2);
}

.welcome-emoji {
    font-size: 2rem;
    margin-bottom: 0.5rem;
    display: block;
}

/* Style cho form container */
.form-container {
    background-color: #ffffff;
    padding: 2rem;
    border-radius: 1rem;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    border: 1px solid #e0e0e0;
}
</style>
""", unsafe_allow_html=True)

# Kh·ªüi t·∫°o session state
if 'messages' not in st.session_state:
    st.session_state.messages = []
if 'preferences' not in st.session_state:
    st.session_state.preferences = Preferences()
if 'preferences_set' not in st.session_state:
    st.session_state.preferences_set = False

# Hi·ªÉn th·ªã form preferences n·∫øu ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p
if not st.session_state.preferences_set:
    st.markdown('<div class="chat-container">', unsafe_allow_html=True)
    st.markdown("""
        <div class="welcome-header">
            <span class="welcome-emoji">üëã</span>
            <h3>Ch√†o m·ª´ng b·∫°n!</h3>
            <p style="margin: 0.5rem 0 0 0; opacity: 0.9;">H√£y cho t√¥i bi·∫øt m·ªôt ch√∫t v·ªÅ b·∫°n</p>
        </div>
    """, unsafe_allow_html=True)
    
    st.markdown('<div class="form-container">', unsafe_allow_html=True)
    with st.form("preferences_form"):
        name = st.text_input("B·∫°n t√™n g√¨?", value=st.session_state.preferences.name)
        number_member = st.text_input("S·ªë th√†nh vi√™n trong nh√≥m?", value=st.session_state.preferences.number_member)
        total_expense = st.text_input("T·ªïng chi ph√≠ cho chuy·∫øn ƒëi?", value=st.session_state.preferences.total_expense)
        
        if st.form_submit_button("B·∫Øt ƒë·∫ßu tr√≤ chuy·ªán"):
            st.session_state.preferences = Preferences(
                name=name,
                number_member=number_member,
                total_expense=total_expense
            )
            st.session_state.preferences_set = True
            st.rerun()
    st.markdown('</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)

# Hi·ªÉn th·ªã chat interface n·∫øu ƒë√£ c√≥ preferences
else:
    st.markdown('<h1 class="stTitle">üèñÔ∏è Tour Guide Assistant</h1>', unsafe_allow_html=True)
    st.markdown('<div class="chat-container">', unsafe_allow_html=True)

    # Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
    for message in st.session_state.messages:
        with st.container():
            if message["role"] == "user":
                st.markdown(f"""
                <div class="chat-message user-message">
                    <div class="message-content">
                        <div class="message-text">
                            <b>B·∫°n:</b><br>{message["content"]}
                        </div>
                    </div>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div class="chat-message bot-message">
                    <div class="message-content">
                        <div class="message-text">
                            <b>Assistant:</b><br>{message["content"]}
                        </div>
                    </div>
                </div>
                """, unsafe_allow_html=True)

    st.markdown('</div>', unsafe_allow_html=True)

    # Input cho ng∆∞·ªùi d√πng
    with st.container():
        col1, col2 = st.columns([5, 1])
        with col1:
            user_input = st.text_input(
                label="C√¢u h·ªèi c·ªßa b·∫°n",
                key="user_input", 
                placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n v·ªÅ du l·ªãch...",
                label_visibility="collapsed"
            )
        with col2:
            send_button = st.button("G·ª≠i", help="Nh·∫•n ƒë·ªÉ g·ª≠i c√¢u h·ªèi c·ªßa b·∫°n")

    # Streamlit interface
    if 'graph' not in st.session_state:
        st.session_state.graph = initialize_graph()

    if 'config' not in st.session_state:
        st.session_state.config = {
            "configurable": {
                "thread_id": str(uuid.uuid4()),
            }
        }

    if 'printed' not in st.session_state:
        st.session_state.printed = set()

    def process_message(message, printed_set):
        """Process and format agent messages."""
        if not isinstance(message, HumanMessage):
            if message.id not in printed_set:
                msg_repr = message.content
                if len(msg_repr) > 1500:  # Truncate long messages
                    msg_repr = msg_repr[:1500] + " ... (truncated)"
                printed_set.add(message.id)
                return msg_repr
        return None

    # X·ª≠ l√Ω khi ng∆∞·ªùi d√πng g·ª≠i tin nh·∫Øn
    if send_button and user_input:
        # Th√™m tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
        st.session_state.messages.append({"role": "user", "content": user_input})
        
        # Debug log
        st.write("Processing message:", user_input)
        
        # Process through the agent graph
        events = st.session_state.graph.stream(
            {"messages": ("user", user_input)},
            st.session_state.config,
            stream_mode="values"
        )
        
        # Process each event
        for event in events:
            # Debug log
            st.write("Event received:", event)
            
            message = event.get("messages")
            if message:
                if isinstance(message, list):
                    message = message[-1]
                
                # Debug log
                st.write("Processing bot response:", message)
                
                bot_response = process_message(message, st.session_state.printed)
                if bot_response:
                    st.session_state.messages.append({
                        "role": "assistant",
                        "content": bot_response
                    })
            
            # Update current state if needed
            current_state = event.get("dialog_state")
            if current_state:
                st.session_state.current_agent = current_state[-1]
        
        st.rerun()

    # Hi·ªÉn th·ªã agent hi·ªán t·∫°i trong sidebar n·∫øu c√≥
    if hasattr(st.session_state, 'current_agent'):
        with st.sidebar:
            st.markdown(f"**Current Agent:** {st.session_state.current_agent}")

    # Footer v·ªõi g·ª£i √Ω
    st.markdown('<div class="footer">', unsafe_allow_html=True)
    st.markdown('<h3>üí° G·ª£i √Ω c√¢u h·ªèi:</h3>', unsafe_allow_html=True)

    # T·∫°o danh s√°ch g·ª£i √Ω c√≥ th·ªÉ click
    suggestions = [
        "G·ª£i √Ω cho t√¥i m·ªôt s·ªë ƒë·ªãa ƒëi·ªÉm du l·ªãch n·ªïi ti·∫øng ·ªü ƒê√† L·∫°t",
        "C√≥ nh·ªØng nh√† h√†ng n√†o ngon ·ªü H·ªôi An?",
        "Th·ªùi ƒëi·ªÉm n√†o th√≠ch h·ª£p ƒë·ªÉ du l·ªãch Sapa?",
        "G·ª£i √Ω l·ªãch tr√¨nh 3 ng√†y ·ªü Ph√∫ Qu·ªëc"
    ]

    # Hi·ªÉn th·ªã g·ª£i √Ω d∆∞·ªõi d·∫°ng c√°c n√∫t c√≥ th·ªÉ click
    for suggestion in suggestions:
        if st.button(suggestion, key=f"suggestion_{suggestion}"):
            # Th√™m tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
            st.session_state.messages.append({"role": "user", "content": suggestion})
            
            # Process through the agent graph
            events = st.session_state.graph.stream(
                {"messages": ("user", suggestion)},
                st.session_state.config,
                stream_mode="values"
            )
            
            # Process each event
            for event in events:
                message = event.get("messages")
                if message:
                    if isinstance(message, list):
                        message = message[-1]
                    
                    bot_response = process_message(message, st.session_state.printed)
                    if bot_response:
                        st.session_state.messages.append({
                            "role": "assistant",
                            "content": bot_response
                        })
                
                # Update current state if needed
                current_state = event.get("dialog_state")
                if current_state:
                    st.session_state.current_agent = current_state[-1]
            
            st.rerun()

    st.markdown('</div>', unsafe_allow_html=True)

    # Hi·ªÉn th·ªã preferences v√† n√∫t reset
    with st.sidebar:
        st.markdown("### üë§ Th√¥ng tin c·ªßa b·∫°n")
        st.write(f"**T√™n:** {st.session_state.preferences.name}")
        st.write(f"**S·ªë th√†nh vi√™n:** {st.session_state.preferences.number_member}")
        st.write(f"**Ng√¢n s√°ch:** {st.session_state.preferences.total_expense}")
        
        if st.button("üîÑ Thay ƒë·ªïi th√¥ng tin"):
            st.session_state.preferences_set = False
            st.session_state.messages = []
            st.rerun()
        
        if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠"):
            st.session_state.messages = []
            st.rerun() 